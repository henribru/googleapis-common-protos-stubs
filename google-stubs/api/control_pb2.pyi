"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.api.policy_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Control(google.protobuf.message.Message):
    """Selects and configures the service controller used by the service.

    Example:

        control:
          environment: servicecontrol.googleapis.com
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENVIRONMENT_FIELD_NUMBER: builtins.int
    METHOD_POLICIES_FIELD_NUMBER: builtins.int
    environment: builtins.str
    """The service controller environment to use. If empty, no control plane
    feature (like quota and billing) will be enabled. The recommended value for
    most services is servicecontrol.googleapis.com
    """
    @property
    def method_policies(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        google.api.policy_pb2.MethodPolicy
    ]:
        """Defines policies applying to the API methods of the service."""

    def __init__(
        self,
        *,
        environment: builtins.str = ...,
        method_policies: (
            collections.abc.Iterable[google.api.policy_pb2.MethodPolicy] | None
        ) = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "environment", b"environment", "method_policies", b"method_policies"
        ],
    ) -> None: ...

global___Control = Control
