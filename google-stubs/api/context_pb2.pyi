# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Context(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    @property
    def rules(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        type___ContextRule
    ]: ...
    def __init__(
        self,
        *,
        rules: typing___Optional[typing___Iterable[type___ContextRule]] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["rules", b"rules"]
    ) -> None: ...

type___Context = Context

class ContextRule(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    selector: typing___Text = ...
    requested: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
        typing___Text
    ] = ...
    provided: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
        typing___Text
    ] = ...
    def __init__(
        self,
        *,
        selector: typing___Optional[typing___Text] = None,
        requested: typing___Optional[typing___Iterable[typing___Text]] = None,
        provided: typing___Optional[typing___Iterable[typing___Text]] = None,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "provided", b"provided", "requested", b"requested", "selector", b"selector"
        ],
    ) -> None: ...

type___ContextRule = ContextRule
